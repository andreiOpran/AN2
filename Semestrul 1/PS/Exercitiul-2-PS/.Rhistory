return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 10
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 15
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 15
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 15
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 15
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 15
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
ruina = function(N, k, simulari = 1e4){
castiguri = 0
for (j in 1:simulari) {
flag = TRUE
capital = k
while(flag){
x = 2*rbinom(1, 1, 0.5) - 1  # X ia valori -1 sau 1, cu probabilitate 0.5
capital = capital + x
if (capital == 0 || capital == N) {
flag = FALSE  # jocul se încheie atunci când capitalul este 0 sau N
}
}
if (capital == N) {
castiguri = castiguri + 1  # se consideră câștigat dacă ajunge la N
}
}
return(castiguri)  # returnăm numărul de jocuri câștigate
}
N = 15
k = 5
castiguri = ruina(N, k)
cat("Numărul de jocuri câștigate in", 1e4, "jocuri este:", castiguri, "\n")
library(shiny); runApp('C:/Users/andre/Desktop/exercitiul 2 ds.R')
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='broski-corp', token='00D9AD250D9AD317B97A8906934AF0BE', secret='kONJgghFDbP0sAqGrW2v0ISMtCkyYDi0+vxJdqJx')
# Apply transformations
transformations <- list(
"X" = X,
"3 + 2X" = 3 + 2 * X,
"X^2" = X^2,
"Sum(X_i)" = cumsum(X),
"Sum(X_i^2)" = cumsum(X^2)
)
library(shiny); runApp('C:/Users/andre/Desktop/broski-corp-2.R')
runExample("01_hello")
# Load necessary libraries
library(shiny)
runExample("01_hello")
runApp("C:\Users\andre\Desktop\Proiect PS")
runApp("Proiect PS")
runApp('C:/Users/andre/Desktop/Proiect PS/broski-corp-2.R')
runApp("C:/Users/andre/Desktop/Exercitiul-2-PS", display.mode = "showcase")
runApp("C:/Users/andre/Desktop/Exercitiul-2-PS", display.mode = "showcase")
library(shiny)
library(bslib)
runApp("C:/Users/andre/Desktop/Exercitiul-2-PS", display.mode = "showcase")
runApp()
setwd("C:/Users/andre/Desktop/Exercitiul-2-PS")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/andre/Desktop/Proiect PS/broski-corp-2.R')
runApp()
runApp()
runApp('C:/Users/andre/Desktop/Proiect PS/broski-corp-2.R')
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/andre/Desktop/Proiect PS/broski-corp-2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
builtin_themes(5)
builtin_themes(6)
bootswatch_themes(5)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
?rexp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp('C:/Users/andre/Desktop/shiny-desktop.R')
curve(pnorm(x, mean = 0, sd = 1), from = -4, to = 4, col = "blue", lwd = 2, ylab = "F(x)", xlab = "x", main = "Funcția de repartiție a unei variabile normale")
grid()
?curve()
?rnorm()
?rexp
?rpois
?rexp
?rpois
?rbinom
runApp('C:/Users/andre/Desktop/Proiect PS/broski-corp-2.R')
runApp()
!list
?list
?c
runApp()
?ecdf
# Number of samples
input <- list(n = 100)
X <- rnorm(input$n)
# Theoretical CDF using pnorm
sorted_X <- sort(X)
cdf_theoretical <- pnorm(sorted_X, mean = 0, sd = 1)
# Empirical CDF using ecdf
ecdf_X <- ecdf(X)
# Plotting the theoretical CDF
plot(sorted_X, cdf_theoretical, type = "l", col = "blue", main = "Theoretical CDF vs ECDF", ylab = "CDF", xlab = "X")
legend("bottomright", legend = c("Theoretical CDF"), col = c("blue"), lty = 1)
# Adding the ECDF to the plot
lines(ecdf_X, col = "red")
legend("bottomright", legend = c("Theoretical CDF", "ECDF"), col = c("blue", "red"), lty = 1:1)
runApp()
runApp()
?curve
runApp()
runApp()
runApp()
?curve
runApp()
runApp()
runApp()
runApp()
runApp()
?plot
?PLOT()
?plot()
?plot()
?rnorm()
?plot()
X<- rnorm(input$n, mean = 0, sd = 1)
X
?plot
runApp()
?plot
runApp()
runApp()
runApp()
cumsum
?cumsum
cumsum(X)
runApp()
runApp()
?paste0
runApp()
forgetDeployment()
unlink(".deployments", recursive = TRUE)
