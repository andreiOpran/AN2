-- E2,E3,E4,E5

-- E2
-- a.
WITH OCTOMBRIE AS (
    SELECT 
        TO_DATE('2024-10-01', 'YYYY-MM-DD') + LEVEL - 1 AS ZI
    FROM DUAL
    CONNECT BY LEVEL <= 31
)
SELECT
    TO_DATE(OCT.ZI),
    COUNT(R.BOOK_DATE)
FROM OCTOMBRIE OCT
LEFT JOIN RENTAL_LBC R ON EXTRACT(DAY FROM OCT.ZI) = EXTRACT(DAY FROM R.BOOK_DATE) 
    AND EXTRACT(MONTH FROM BOOK_DATE) = 10
GROUP BY OCT.ZI 
ORDER BY OCT.ZI;



-- b. 
CREATE TABLE OCTOMBRIE_AO(
    ID INT PRIMARY KEY,
    DATA DATE NOT NULL
);



-- POPULARE UTILIZAND PL/SQL
DECLARE
    AUX DATE;
BEGIN
    FOR CONT IN 1..31 LOOP
        AUX := TO_DATE('2024-10-' || TO_CHAR(CONT), 'YYYY-MM-DD');
        INSERT INTO OCTOMBRIE_AO (ID, DATA) VALUES (CONT, AUX);
    END LOOP;
    COMMIT;
END;
/


-- REZOLVATI IN SQL PROBLEMA DATA
SELECT
    TO_DATE(OCT.DATA),
    COUNT(R.BOOK_DATE)
FROM OCTOMBRIE_AO OCT
LEFT JOIN RENTAL_LBC R ON EXTRACT(DAY FROM OCT.DATA) = EXTRACT(DAY FROM R.BOOK_DATE) 
    AND EXTRACT(MONTH FROM BOOK_DATE) = 10
GROUP BY OCT.DATA 
ORDER BY OCT.DATA;




-- E3
-- Carmen Velasquez (EXEMPLU DE INPUT)
SET SERVEROUTPUT ON;

DECLARE
    V_FIRST_NAME VARCHAR2(100) := '&V_FIRST_NAME';
    V_LAST_NAME VARCHAR2(100) := '&V_LAST_NAME';
    REZ NUMBER(6);
    
    V_CONT_FIRST_NAME NUMBER(6);
    V_CONT_LAST_NAME NUMBER(6);
BEGIN
    SELECT 
        COUNT(*)
    INTO REZ
    FROM RENTAL_LBC R
    JOIN MEMBER_LBC M ON M.MEMBER_ID = R.MEMBER_ID
    WHERE UPPER(M.FIRST_NAME) = UPPER(V_FIRST_NAME) AND UPPER(M.LAST_NAME) = UPPER(V_LAST_NAME);
    
    -- VERIFICARE CATI MEMBRI AU PRENUMELE CITIT DE LA TASTATURA
    SELECT
        COUNT(*)
    INTO V_CONT_FIRST_NAME
    FROM MEMBER_LBC M
    WHERE UPPER(M.FIRST_NAME) = UPPER(V_FIRST_NAME);
    
    -- VERIFICARE CATI MEMBRI AU NUMELE CITIT DE LA TASTATURA
    SELECT
        COUNT(*)
    INTO V_CONT_LAST_NAME
    FROM MEMBER_LBC M
    WHERE UPPER(M.LAST_NAME) = UPPER(V_LAST_NAME);
    
    IF V_CONT_FIRST_NAME = 0 OR V_CONT_LAST_NAME = 0 THEN
        DBMS_OUTPUT.PUT_LINE('NU EXISTA MEMBRI CU NUMELE DAT.');
    ELSIF V_CONT_FIRST_NAME != 1 AND V_CONT_LAST_NAME != 1 THEN
        DBMS_OUTPUT.PUT_LINE('NU SE POATE AFISA NUMARUL DE IMPRUMUTURI PENTRU CA EXISTA MAI MULTI MEMBRI CU ACELASI NUME.');
    ELSE
    DBMS_OUTPUT.PUT_LINE('NUMARUL DE TITLURI IMPRUMUTATE DE CATRE ' || V_FIRST_NAME || ' ' || V_LAST_NAME || ' ESTE: ' || REZ);
    END IF;

END;
/




-- E4
-- Carmen Velasquez (EXEMPLU DE INPUT)
SET SERVEROUTPUT ON;

DECLARE
    V_FIRST_NAME VARCHAR2(100) := '&V_FIRST_NAME';
    V_LAST_NAME VARCHAR2(100) := '&V_LAST_NAME';
    REZ NUMBER(6);
    
    V_CONT_FIRST_NAME NUMBER(6);
    V_CONT_LAST_NAME NUMBER(6);
    
    V_TITLURI NUMBER(6);
    V_RAPORT NUMBER; 
    V_CATEGORIE VARCHAR(5);
BEGIN
    -- EXTRAGERE NUMAR DE IMPRUMUTURI
    SELECT 
        COUNT(*)
    INTO REZ
    FROM RENTAL_LBC R
    JOIN MEMBER_LBC M ON M.MEMBER_ID = R.MEMBER_ID
    WHERE UPPER(M.FIRST_NAME) = UPPER(V_FIRST_NAME) AND UPPER(M.LAST_NAME) = UPPER(V_LAST_NAME);
    
    -- VERIFICARE CATI MEMBRI AU PRENUMELE CITIT DE LA TASTATURA
    SELECT
        COUNT(*)
    INTO V_CONT_FIRST_NAME
    FROM MEMBER_LBC M
    WHERE UPPER(M.FIRST_NAME) = UPPER(V_FIRST_NAME);
    
    -- VERIFICARE CATI MEMBRI AU NUMELE CITIT DE LA TASTATURA
    SELECT
        COUNT(*)
    INTO V_CONT_LAST_NAME
    FROM MEMBER_LBC M
    WHERE UPPER(M.LAST_NAME) = UPPER(V_LAST_NAME);
    
    
    -- EXTRAGERE NUMAR TITLURI
    SELECT
        COUNT(T.TITLE_ID)
    INTO V_TITLURI
    FROM TITLE_LBC T;
    
    
    IF V_CONT_FIRST_NAME = 0 OR V_CONT_LAST_NAME = 0 THEN
        DBMS_OUTPUT.PUT_LINE('NU EXISTA MEMBRI CU NUMELE DAT.');
    ELSIF V_CONT_FIRST_NAME != 1 AND V_CONT_LAST_NAME != 1 THEN
        DBMS_OUTPUT.PUT_LINE('NU SE POATE AFISA NUMARUL DE IMPRUMUTURI PENTRU CA EXISTA MAI MULTI MEMBRI CU ACELASI NUME.');
    ELSE
    DBMS_OUTPUT.PUT_LINE('NUMARUL DE TITLURI IMPRUMUTATE DE CATRE ' || V_FIRST_NAME || ' ' || V_LAST_NAME || ' ESTE: ' || REZ);
    
    -- CALCULARE CATEGORIE
    V_RAPORT := REZ / V_TITLURI;
    V_CATEGORIE :=
    CASE
        WHEN V_RAPORT > 0.75 THEN '1'
        WHEN V_RAPORT > 0.50 THEN '2'
        WHEN V_RAPORT > 0.25 THEN '3'
        ELSE '4'
    END;
    
    DBMS_OUTPUT.PUT_LINE('MEMBRUL FACE PARTE DIN CATEGORIA: ' || V_CATEGORIE);
    
    END IF;

END;
/




-- E5
CREATE TABLE MEMBER_AO AS
SELECT *
FROM MEMBER_LBC;

ALTER TABLE MEMBER_AO
ADD DISCOUNT NUMBER(3, 2);


-- Actualizati coloana discount pentru un membru al carui cod este dat de la tastatura.
DECLARE
    V_MEMBER_ID MEMBER_AO.MEMBER_ID%TYPE := &V_MEMBER_ID;
    V_DISCOUNT MEMBER_AO.DISCOUNT%TYPE;
    V_TITLURI NUMBER(6);
    V_NUMAR_IMPRUMUTURI NUMBER(6);
    V_RAPORT NUMBER;
BEGIN

    -- EXTRAGERE NUMAR TITLURI
    SELECT
        COUNT(T.TITLE_ID)
    INTO V_TITLURI
    FROM TITLE_LBC T;
    
    -- EXTRAGERE NUMAR DE IMPRUMUTURI ALE MEMBRULUI
     SELECT 
        COUNT(*)
    INTO V_NUMAR_IMPRUMUTURI
    FROM RENTAL_LBC R
    JOIN MEMBER_AO M ON M.MEMBER_ID = R.MEMBER_ID
    WHERE M.MEMBER_ID = V_MEMBER_ID;
    
    V_RAPORT := V_NUMAR_IMPRUMUTURI / V_TITLURI;
    
    V_DISCOUNT :=
    CASE
        WHEN V_RAPORT > 0.75 THEN 0.1
        WHEN V_RAPORT > 0.50 THEN 0.05
        WHEN V_RAPORT > 0.25 THEN 0.03
        ELSE NULL
    END;
    
    UPDATE MEMBER_AO
    SET DISCOUNT = V_DISCOUNT
    WHERE MEMBER_ID = V_MEMBER_ID;
    
    IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('EROARE: NU S-A PRODUS NICIO ACTUALIZARE.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('ACTUALIZAREA S-A PRODUS CU SUCCES.');
    END IF;

END;
/



